[{"C:\\Users\\nqassrawi\\clientTask\\src\\index.js":"1","C:\\Users\\nqassrawi\\clientTask\\src\\reportWebVitals.js":"2","C:\\Users\\nqassrawi\\clientTask\\src\\App.js":"3","C:\\Users\\nqassrawi\\clientTask\\src\\Controller.jsx":"4","C:\\Users\\nqassrawi\\clientTask\\src\\components\\map.jsx":"5","C:\\Users\\nqassrawi\\clientTask\\src\\components\\polygonsTable.jsx":"6","C:\\Users\\nqassrawi\\clientTask\\src\\components\\globalState.jsx":"7","C:\\Users\\nqassrawi\\clientTask\\src\\components\\actions.jsx":"8"},{"size":630,"mtime":1611667231201,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1611556835302,"results":"11","hashOfConfig":"10"},{"size":249,"mtime":1611556835293,"results":"12","hashOfConfig":"10"},{"size":2669,"mtime":1611666090874,"results":"13","hashOfConfig":"10"},{"size":4318,"mtime":1611670079936,"results":"14","hashOfConfig":"10"},{"size":1610,"mtime":1611649076986,"results":"15","hashOfConfig":"10"},{"size":300,"mtime":1611584395648,"results":"16","hashOfConfig":"10"},{"size":946,"mtime":1611649135688,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ucuy7h",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},"C:\\Users\\nqassrawi\\clientTask\\src\\index.js",[],["39","40"],"C:\\Users\\nqassrawi\\clientTask\\src\\reportWebVitals.js",[],"C:\\Users\\nqassrawi\\clientTask\\src\\App.js",["41"],"import logo from './logo.svg';\r\nimport './style/App.css';\r\nimport Controller from'./Controller'\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div ><Controller></Controller></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\nqassrawi\\clientTask\\src\\Controller.jsx",["42","43","44"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { SimpleMap } from './components/map'\r\nimport useGlobal from './components/globalState';\r\n \r\nimport { RenderTable } from './components/polygonsTable'\r\nimport { select } from './components/polygonsTable'\r\n\r\n\r\nexport default function Controller() {\r\n    const [featuresData, setFeatures] = React.useState([])\r\n    const [properties, setProperties] = React.useState([])\r\n    const [globalState,globalActions] = useGlobal();\r\n\r\n\r\n    const colors = [\"#FFE4C4\",\"#5F9EA0\",\"#008B8B\",\"#006400\",\"#556B2F\",\"#ADD8E6\",\"#F5F5F5\",\"#F0F8FF\",\"#B22222\"]\r\n    const names = [  \"Bruce\",\"Cook\",\r\n    \"Carolyn\",\"Morgan\",\r\n    \"Albert\",\"Walker\",\r\n    \"Randy\",\"Reed\",\r\n    \"Larry\",\"Barnes\",\r\n    \"Lois\",\"Wilson\",\r\n    \"Jesse\",\"Campbell\",\r\n    \"Ernest\",\"Rogers\",\r\n    \"Theresa\",\"Patterson\",\r\n    \"Henry\",\"Simmons\",\r\n    \"Michelle\",\"Perry\",\r\n    \"Frank\",\"Butler\",\r\n    \"Shirley\"]\r\n\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n        function fetchData() {\r\n            fetch('https://services5.arcgis.com/GfwWNkhOj9bNBqoJ/arcgis/rest/services/NYC_Election_Districts_Water_Included/FeatureServer/0/query?where=1=1&outFields=*&outSR=4326&f=pgeojson', {\r\n                // mode: 'no-cors',\r\n                method: 'GET',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                },\r\n            },\r\n            ).then(response => {\r\n                if (response.ok) {\r\n                    response.json().then(json => {\r\n                        setFeatures(json.features)\r\n                    })\r\n                }\r\n            })\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setPropertiesTable()\r\n    }, [featuresData])\r\n\r\n    function setPropertiesTable() {\r\n\r\n        globalActions.addColorForPoly()\r\n        const propertiesData = [];\r\n        featuresData.forEach(property => {\r\n            propertiesData.push(property.properties);\r\n            let color = colors[Math.floor(Math.random() * colors.length)];\r\n            let name = names[Math.floor(Math.random() * names.length)];\r\n            globalActions.addColorForPoly(color);\r\n            globalActions.addNameForPoly(name)\r\n\r\n        });\r\n        setProperties(propertiesData);\r\n    }\r\n\r\n    function displayInTable(id, show) {\r\n        select(id, show);\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <div style ={{display: \"flex\"}} >\r\n                <div ><SimpleMap pos={featuresData} mapper={displayInTable} /></div>\r\n                <div ><RenderTable properties = {properties}></RenderTable></div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}","C:\\Users\\nqassrawi\\clientTask\\src\\components\\map.jsx",["45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65"],"C:\\Users\\nqassrawi\\clientTask\\src\\components\\polygonsTable.jsx",["66","67"],"import { useEffect, useState, useRef } from 'react';\r\nimport './table.css';\r\nimport useGlobal from './globalState';\r\n\r\n\r\nfunction select(id, show) {\r\n\tvar row = document.getElementById(id)\r\n\tif (show) {\r\n\t\trow.style = \"background-color: blanchedalmond\";\r\n\t} else {\r\n\t\trow.style = \"background-color: transparent\";\r\n\r\n\t}\r\n}\r\n\r\n\r\nconst RenderTable = (props) => {\r\n\tconst changedRow = useRef(null);\r\n\tconst [globalState, globalActions] = useGlobal()\r\n\tconst list = props.properties.slice(0, 10).map((ele, index) =>\r\n\t\t<tr onMouseOver={() => { ShowPolygonfromMap(ele.OBJECTID) }} key={ele.OBJECTID} id={ele.OBJECTID}>\r\n\t\t\t<td >{ele.OBJECTID}</td>\r\n\t\t\t<td><input defaultValue={ele.Shape__Area}  ></input></td>\r\n\t\t\t<td>{ele.Shape__Length}</td>\r\n\t\t\t<td><button onClick={e => alert(e.target.value)} >Update</button></td>\r\n\t\t\t<td><input defaultValue={globalState.polygonsColors[index]} id = {index} onChange={updateColor}></input></td>\r\n\t\t\t{/* <td><input defaultValue={globalState.polygonsNames[index]} id = {index} ></input></td> */}\r\n\r\n\t\t</tr>\r\n\r\n\t)\r\n\tfunction updateColor(e) {\r\n\t\tconsole.log(\"eeee\", e.target.value)\r\n\t\tchangedRow.current = {val: e.target.value,id: e.target.id}\r\n\t}\r\n\tuseEffect(()=>{\r\n\t\tif (changedRow.current != null) {\r\n\t\tglobalActions.changeColorForPoly(changedRow.current.id,changedRow.current.val)\r\n\t\t}\r\n\t},[changedRow.current])\r\n\r\n\tfunction ShowPolygonfromMap(id) {\r\n\t\tglobalActions.setPoly(id)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t}, [globalState.polygonsColors])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<table>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{list}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\nexport { RenderTable, select }\r\n","C:\\Users\\nqassrawi\\clientTask\\src\\components\\globalState.jsx",[],"C:\\Users\\nqassrawi\\clientTask\\src\\components\\actions.jsx",["68"],"import { useEffect } from \"react\";\r\n\r\nexport const setPoly = (globalState, payload) =>{\r\n    globalState.setState({hoveredPoly: payload})\r\n\r\n}\r\n\r\nexport const changeColorForPoly = (globalState, id, payload) =>{\r\n    let colors = [...globalState.state.polygonsColors];\r\n    colors[id] = {...colors[id], payload};\r\n    globalState.setState({polygonsColors: colors });\r\n}\r\n\r\nexport const addColorForPoly = (globalState, payload) =>{\r\n    const list = [...globalState.state.polygonsColors, payload];\r\n   globalState.setState({polygonsColors: list})\r\n\r\n}\r\n\r\nexport const addNameForPoly = (globalState, payload) =>{\r\n    const list = [...globalState.state.polygonsNames, payload];\r\n   globalState.setState({polygonsNames: list})\r\n\r\n}\r\n\r\nexport const changeNameForPoly = (globalState, id, payload) =>{\r\n    let names = [...globalState.state.polygonsNames];\r\n    names[id] = {...names[id], payload};\r\n    globalState.setState({polygonsNames: names });\r\n}",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":8,"nodeType":"75","messageId":"76","endLine":1,"endColumn":12},{"ruleId":"73","severity":1,"message":"77","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":25},{"ruleId":"73","severity":1,"message":"78","line":13,"column":12,"nodeType":"75","messageId":"76","endLine":13,"endColumn":23},{"ruleId":"79","severity":1,"message":"80","line":54,"column":8,"nodeType":"81","endLine":54,"endColumn":22,"suggestions":"82"},{"ruleId":"73","severity":1,"message":"83","line":1,"column":27,"nodeType":"75","messageId":"76","endLine":1,"endColumn":33},{"ruleId":"73","severity":1,"message":"84","line":2,"column":21,"nodeType":"75","messageId":"76","endLine":2,"endColumn":31},{"ruleId":"73","severity":1,"message":"85","line":2,"column":33,"nodeType":"75","messageId":"76","endLine":2,"endColumn":44},{"ruleId":"73","severity":1,"message":"86","line":3,"column":10,"nodeType":"75","messageId":"76","endLine":3,"endColumn":17},{"ruleId":"73","severity":1,"message":"87","line":3,"column":19,"nodeType":"75","messageId":"76","endLine":3,"endColumn":25},{"ruleId":"73","severity":1,"message":"88","line":7,"column":18,"nodeType":"75","messageId":"76","endLine":7,"endColumn":26},{"ruleId":"73","severity":1,"message":"89","line":20,"column":22,"nodeType":"75","messageId":"76","endLine":20,"endColumn":35},{"ruleId":"73","severity":1,"message":"90","line":31,"column":9,"nodeType":"75","messageId":"76","endLine":31,"endColumn":12},{"ruleId":"73","severity":1,"message":"91","line":33,"column":9,"nodeType":"75","messageId":"76","endLine":33,"endColumn":21},{"ruleId":"73","severity":1,"message":"92","line":33,"column":23,"nodeType":"75","messageId":"76","endLine":33,"endColumn":38},{"ruleId":"73","severity":1,"message":"93","line":48,"column":6,"nodeType":"75","messageId":"76","endLine":48,"endColumn":7},{"ruleId":"94","severity":1,"message":"95","line":50,"column":3,"nodeType":"96","messageId":"97","endLine":65,"endColumn":4},{"ruleId":"98","severity":1,"message":"99","line":52,"column":11,"nodeType":"100","messageId":"101","endLine":52,"endColumn":13},{"ruleId":"98","severity":1,"message":"99","line":55,"column":13,"nodeType":"100","messageId":"101","endLine":55,"endColumn":15},{"ruleId":"73","severity":1,"message":"102","line":67,"column":11,"nodeType":"75","messageId":"76","endLine":67,"endColumn":26},{"ruleId":"73","severity":1,"message":"103","line":72,"column":11,"nodeType":"75","messageId":"76","endLine":72,"endColumn":25},{"ruleId":"73","severity":1,"message":"104","line":77,"column":8,"nodeType":"75","messageId":"76","endLine":77,"endColumn":18},{"ruleId":"79","severity":1,"message":"105","line":82,"column":3,"nodeType":"81","endLine":82,"endColumn":5,"suggestions":"106"},{"ruleId":"79","severity":1,"message":"107","line":86,"column":5,"nodeType":"81","endLine":86,"endColumn":73,"suggestions":"108"},{"ruleId":"98","severity":1,"message":"99","line":127,"column":10,"nodeType":"100","messageId":"101","endLine":127,"endColumn":12},{"ruleId":"94","severity":1,"message":"95","line":160,"column":10,"nodeType":"96","messageId":"97","endLine":162,"endColumn":13},{"ruleId":"73","severity":1,"message":"77","line":1,"column":21,"nodeType":"75","messageId":"76","endLine":1,"endColumn":29},{"ruleId":"79","severity":1,"message":"109","line":40,"column":4,"nodeType":"81","endLine":40,"endColumn":24,"suggestions":"110"},{"ruleId":"73","severity":1,"message":"111","line":1,"column":10,"nodeType":"75","messageId":"76","endLine":1,"endColumn":19},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'globalState' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPropertiesTable'. Either include it or remove the dependency array.","ArrayExpression",["114"],"'useRef' is defined but never used.","'LoadScript' is defined but never used.","'OverlayView' is defined but never used.","'Polygon' is defined but never used.","'Marker' is defined but never used.","'Polyline' is defined but never used.","'globalActions' is assigned a value but never used.","'map' is assigned a value but never used.","'polygonColor' is assigned a value but never used.","'setPolygonColor' is assigned a value but never used.","'k' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'handleMouseOver' is defined but never used.","'handleMouseOut' is defined but never used.","'onLoadPoly' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'polygonsArray'. Either include it or remove the dependency array.",["115"],"React Hook useEffect has a missing dependency: 'showPolygonFromMap'. Either include it or remove the dependency array.",["116"],"React Hook useEffect has a missing dependency: 'globalActions'. Either include it or remove the dependency array. Mutable values like 'changedRow.current' aren't valid dependencies because mutating them doesn't re-render the component.",["117"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [featuresData, setPropertiesTable]",{"range":"126","text":"127"},"Update the dependencies array to be: [polygonsArray]",{"range":"128","text":"129"},"Update the dependencies array to be: [globalState.hoveredPoly, polygonsArray, globalState.polygonsColors, showPolygonFromMap]",{"range":"130","text":"131"},"Update the dependencies array to be: [globalActions]",{"range":"132","text":"133"},[1753,1767],"[featuresData, setPropertiesTable]",[2298,2300],"[polygonsArray]",[2355,2423],"[globalState.hoveredPoly, polygonsArray, globalState.polygonsColors, showPolygonFromMap]",[1321,1341],"[globalActions]"]