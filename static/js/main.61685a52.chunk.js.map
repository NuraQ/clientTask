{"version":3,"sources":["logo.svg","components/store/actions.jsx","components/store/globalState.jsx","components/Map/map.jsx","components/PolygonsTable/polygonsTable.jsx","Controller.jsx","App.js","reportWebVitals.js","index.js"],"names":["setPoly","globalState","payload","setState","hoveredPoly","changeColorForPoly","id","colors","state","polygonsColors","addColorForPoly","list","addNameForPoly","polygonsNames","changeNameForPoly","names","addNewPoly","polygonAddedToMap","console","log","useGlobal","globalHook","React","actions","libraries","containerStyle","width","height","SimpleMap","props","globalActions","useState","marker","setMarker","center","lat","lng","isLoaded","useJsApiLoader","googleMapsApiKey","setMap","polygons","setPolygons","setNewPaths","onLoad","useCallback","map","bounds","window","google","maps","LatLngBounds","fitBounds","onUnmount","paths","i","handleMouseOver","e","mapper","this","polygonKey","location","latLng","key","setOptions","fillColor","handleMouseOut","polygonsArray","onLoadPoly","polygon","push","useEffect","polyId","showPolygonFromMap","onPolygonComplete","getPath","getArray","OBJECTID","length","Shape__Area","Shape__Length","mapContainerStyle","zoom","position","style","backgroundColor","opacity","padding","fontSize","fontColor","drawingControl","onRectangleComplete","onPolylineComplete","pos","ele","geometry","coordinates","coord","k","parseFloat","slice","path","onMouseOver","onMouseOut","clickable","options","indexOf","strokeColor","strokeOpacity","strokeWeight","fillOpacity","draggable","geodesic","RenderTable","changedRow","useRef","properties","index","defaultValue","onChange","updateColor","updateName","current","val","target","value","className","Controller","featuresData","setFeatures","setProperties","fetch","method","headers","Accept","then","response","ok","json","features","propertiesData","forEach","property","color","Math","floor","random","name","setPropertiesTable","PolygonAddedToMap","newTable","appendNewDrawnPolygonsToTable","display","show","row","document","getElementById","select","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.61685a52.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nexport const setPoly = (globalState, payload) =>{\n    globalState.setState({hoveredPoly: payload})\n\n}\n\nexport const changeColorForPoly = (globalState, id, payload) =>{\n    let colors = [...globalState.state.polygonsColors];\n    colors[id] = payload\n    globalState.setState({polygonsColors: colors });\n}\n\nexport const addColorForPoly = (globalState, payload) =>{\n    const list = [...globalState.state.polygonsColors, payload];\n   globalState.setState({polygonsColors: list})\n\n}\n\nexport const addNameForPoly = (globalState, payload) =>{\n    const list = [...globalState.state.polygonsNames, payload];\n   globalState.setState({polygonsNames: list})\n}\n\nexport const changeNameForPoly = (globalState, id, payload) =>{\n    let names = [...globalState.state.polygonsNames];\n    names[id] = payload\n    globalState.setState({polygonsNames: names });\n}\nexport const addNewPoly = (globalState, payload) => {\n    globalState.setState({polygonAddedToMap: payload})\n    console.log(globalState.state.polygonAddedToMap)\n}","import React from 'react';\nimport globalHook from \"use-global-hook\";\n\nimport * as actions from \"./actions\";\n\nconst initialState = {\n    hoveredPoly: 0,\n    polygonsColors: [],\n    polygonsNames: [],\n    polygonAddedToMap: null\n    \n}\n\nconst useGlobal = globalHook(React,initialState,actions)\nexport default useGlobal\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport { GoogleMap, useJsApiLoader,InfoBox, DrawingManager, Polygon } from '@react-google-maps/api';\r\nimport useGlobal from '../store/globalState';\r\n\r\n\r\nconst libraries = ['drawing'];\r\nconst containerStyle = {\r\n\twidth: '700px',\r\n\theight: '700px'\r\n};\r\nconst SimpleMap = (props) => {\r\n\tconst [globalState, globalActions] = useGlobal()\r\n\tconst [marker, setMarker] = useState(null)\r\n\tvar center = {\r\n\t\tlat: -73.9130656659264,\r\n\t\tlng: 40.55849125972\r\n\t};\r\n\tconst { isLoaded } = useJsApiLoader({\r\n\t\tid: 'google-map-script',\r\n\t\tgoogleMapsApiKey: 'AIzaSyDeL9AfH6JB5TdYWWVH4WRoVmti-zFHM_g',\r\n\t\tlibraries: libraries\r\n\t})\r\n\tconst [map, setMap] = React.useState(null)\r\n\tconst [polygons, setPolygons] = React.useState([])\r\n\tconst [drawnPolygonsPaths, setNewPaths] = React.useState([[]])\r\n\r\n\tconst onLoad = React.useCallback(function callback(map) {\r\n\t\tconst bounds = new window.google.maps.LatLngBounds();\r\n\t\tmap.fitBounds(bounds);\r\n\t\tsetMap(map)\r\n\r\n\t}, [])\r\n\r\n\tconst onUnmount = React.useCallback(function callback(map) {\r\n\t\tsetMap(null)\r\n\t}, [])\r\n\tvar paths = [[]]\r\n\tvar i = 0\r\n\tconst coordinates = () => {\r\n\t\t{\r\n\t\t\tprops.pos.map(\r\n\t\t\t\t(ele) => {\r\n\t\t\t\t\tpaths[i] = []\r\n\t\t\t\t\tele.geometry.coordinates.map(\r\n\t\t\t\t\t\tcoord => {\r\n\t\t\t\t\t\t\tfor (var k = 0; k < coord.length; k++) {\r\n\t\t\t\t\t\t\t\tpaths[i].push({ lat: parseFloat(coord[k][0]), lng: parseFloat(coord[k][1]) });\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\tfunction handleMouseOver(e) {\r\n\t\tprops.mapper(this.polygonKey, true);\r\n\t\tconst location = e.latLng;\r\n\t\tcenter = {location};\r\n\t\tsetMarker({location: location, key: this.polygonKey});\r\n\t\tthis.setOptions({ fillColor: \"Blue\" });\r\n\t}\r\n\r\n\tfunction handleMouseOut(e) {\r\n\t\tprops.mapper(this.polygonKey, false);\r\n\t\t setMarker(null);\r\n\t\t this.setOptions({ fillColor: globalState.polygonsColors[this.polygonKey] });\r\n\t}\r\n\t\r\n\tconst polygonsArray = []\r\n\tconst onLoadPoly = useCallback(\r\n\t\tpolygon => {\r\n\t\t\tpolygonsArray.push(polygon);\r\n\t\t\tsetPolygons(polygonsArray);\r\n\t\t},\r\n\t\t[]\r\n\t);\r\n\tuseEffect(() => {\r\n\t\tshowPolygonFromMap()\r\n\t}, [globalState.hoveredPoly, polygonsArray, globalState.polygonsColors]);\r\n\r\n\tfunction showPolygonFromMap() {\r\n\t\tlet polyId = globalState.hoveredPoly\r\n\t\tif (polygons[polyId - 1] != null) {\r\n\t\t\tpolygons[polyId - 1].setOptions({ fillColor: \"Blue\" });\r\n\t\t\tsetMap(polygons[polyId - 1])\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tconst onPolygonComplete = polygon => {\r\n\t\tpaths.push(polygon.getPath().getArray())\r\n\t\tpaths = [...paths, polygon.getPath().getArray()]\r\n\t\tsetNewPaths(paths)\r\n\t\tglobalActions.addNewPoly({ OBJECTID: polygonsArray.length, Shape__Area: 332, Shape__Length: 3232 })\r\n\t}\r\n\treturn isLoaded ? (\r\n\t\t<GoogleMap\r\n\t\t\tmapContainerStyle={containerStyle}\r\n\t\t\tcenter={center}\r\n\t\t\tzoom={10}\r\n\t\t\tonLoad={onLoad}\r\n\t\t\tonUnmount={onUnmount}\r\n\t\t>\r\n\t\t\t{marker ? \r\n\t\t\t\t\t<InfoBox\r\n\t\t\t\t\t\tposition={marker.location}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<div style={{ backgroundColor: 'white', opacity: 0.75, padding: 12 }}>\r\n\t\t\t\t\t\t\t<div style={{ fontSize: 16, fontColor: `#08233B` }}>\r\n\t\t\t\t\t\t\t\t{globalState.polygonsNames[marker.key]}\r\n\t\t\t\t\t\t   </div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</InfoBox>\r\n\t\t\t : <div></div>}\r\n\t\t\t<DrawingManager\r\n\t\t\t\tdrawingControl={true}\r\n\t\t\t\tonPolygonComplete={onPolygonComplete}\r\n\t\t\t\tonRectangleComplete={onPolygonComplete}\r\n\t\t\t\tonPolylineComplete={onPolygonComplete}\r\n\t\t\t/>\r\n\t\t\t{coordinates()}\r\n\t\t\t{paths.slice(0, 10).map(\r\n\t\t\t\tpath => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Polygon\r\n\t\t\t\t\t\t\t\tpath={path}\r\n\t\t\t\t\t\t\t\tkey={paths.indexOf(path) + 1}\r\n\t\t\t\t\t\t\t\tonMouseOver={handleMouseOver}\r\n\t\t\t\t\t\t\t\tonMouseOut={handleMouseOut}\r\n\t\t\t\t\t\t\t\tonUnmount={onUnmount}\r\n\t\t\t\t\t\t\t\tonLoad={onLoadPoly}\r\n\t\t\t\t\t\t\t\tclickable={false}\r\n\t\t\t\t\t\t\t\toptions={{\r\n\t\t\t\t\t\t\t\t\tpolygonKey: paths.indexOf(path) + 1,\r\n\t\t\t\t\t\t\t\t\tstrokeColor: globalState.polygonsColors[paths.indexOf(path) + 1],\r\n\t\t\t\t\t\t\t\t\tstrokeOpacity: 0.8,\r\n\t\t\t\t\t\t\t\t\tstrokeWeight: 2,\r\n\t\t\t\t\t\t\t\t\tfillColor: globalState.polygonsColors[paths.indexOf(path) + 1],\r\n\t\t\t\t\t\t\t\t\tfillOpacity: 0.35,\r\n\t\t\t\t\t\t\t\t\tdraggable: true,\r\n\t\t\t\t\t\t\t\t\tgeodesic: true,\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t</Polygon>\r\n\t\t\t\t\t\t</div>);\r\n\t\t\t\t}\r\n\t\t\t)}\r\n\t\t</GoogleMap>\r\n\t) : <></>\r\n}\r\n\r\n\r\n\r\n\r\nexport { SimpleMap };\r\n","\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport './table.css';\r\nimport useGlobal from '../store/globalState';\r\n\r\n\r\nfunction select(id, show) {\r\n\tvar row = document.getElementById(id)\r\n\tvar sty = row.style\r\n\tif (show) {\r\n\t\trow.style = \"background-color: blanchedalmond\";\r\n\t} else {\r\n\t\trow.style = \"background-color: `${sty}`\";\r\n\r\n\t}\r\n}\r\n\r\n\r\nconst RenderTable = (props) => {\r\n\tconst changedRow = useRef(null);\r\n\tconst [globalState, globalActions] = useGlobal()\r\n\tconst list = props.properties.slice(0, 10).map((ele, index) =>\r\n\t\t<tr onMouseOver={() => { ShowPolygonfromMap(ele.OBJECTID) }} key={ele.OBJECTID} id={ele.OBJECTID}>\r\n\t\t\t<td >{ele.OBJECTID}</td>\r\n\t\t\t<td>{ele.Shape__Area}</td>\r\n\t\t\t<td>{ele.Shape__Length}</td>\r\n\t\t\t<td><input defaultValue={globalState.polygonsColors[ele.OBJECTID]} id={ele.OBJECTID} onChange={updateColor}></input></td>\r\n\t\t\t<td><input defaultValue={globalState.polygonsNames[ele.OBJECTID]}  id={ele.OBJECTID} onChange={updateName}></input></td>\r\n\t\t</tr>\r\n\r\n\t)\r\n\tfunction updateColor(e) {\r\n\t\tchangedRow.current = {val: e.target.value, id: e.target.id}\r\n\t}\r\n\tfunction updateName(e) {\r\n\t\tglobalActions.changeNameForPoly( e.target.id, e.target.value )\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tif (changedRow.current != null) {\r\n\t\t\tglobalActions.changeColorForPoly(changedRow.current.id, changedRow.current.val)\r\n\t\t}\r\n\t}, [changedRow.current])\r\n\r\n\tfunction ShowPolygonfromMap(id) {\r\n\t\tglobalActions.setPoly(id)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<table>\r\n\t\t\t\t<tr className = \"Header\"><th>\r\n\t\t\t\t\tID\r\n\t\t\t\t\t</th>\r\n\t\t\t\t<th>\r\n\t\t\t\t\tshape area\r\n\t\t\t\t\t</th>\r\n\t\t\t\t<th>\r\n\t\t\t\t\tshape Length\r\n\t\t\t\t\t</th>\r\n\t\t\t\t<th>\r\n\t\t\t\t\tshape Color\r\n\t\t\t\t\t</th>\r\n\t\t\t\t\t<th>\r\n\t\t\t\t\tshape name\r\n\t\t\t\t\t</th></tr>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{list}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\nexport { RenderTable, select }\r\n","\n  \nimport React, { useState, useEffect } from 'react';\n\nimport { SimpleMap } from './components/Map/map'\nimport useGlobal from './components/store/globalState';\n \nimport { RenderTable, select } from './components/PolygonsTable/polygonsTable'\n\n\nexport default function Controller() {\n    const [featuresData, setFeatures] = React.useState([])\n    const [properties, setProperties] = React.useState([])\n    const [globalState,globalActions] = useGlobal();\n\n\n    const colors = [  \"AliceBlue\",\n    \"Aqua\",  \"Aquamarine\",\n    \"BlanchedAlmond\",\"BlueViolet\",\n    \"Brown\",\"BurlyWood\",\n    \"DarkGreen\",\"DarkKhaki\",\n    \"DarkMagenta\",  \"DarkOliveGreen\",\n    \"DarkOrange\",\n    \"DarkOrchid\",\"DarkRed\",\n    \"DarkSalmon\",  \"DarkSeaGreen\",\n    \"DarkSlateBlue\",\"DarkSlateGrey\",\n    \"DarkTurquoise\", \"DarkViolet\",\n    \"DeepPink\",\n    \"Gold\",  \"GoldenRod\",\n    \"Green\",\"HotPink\",\n    \"IndianRed\", \"Indigo\",\n    \"Ivory\", \"Khaki\",\n    \"LavenderBlush\",  \"LawnGreen\",\n    \"LemonChiffon\",   \"LightBlue\",\n    \"LightCoral\", \"LightCyan\",\n    \"LightGoldenRodYellow\",  \"LightGray\",\n    \"LightGrey\",\"LightGreen\",\n    \"LightPink\", \"LightSalmon\",\n    \"LightSeaGreen\",\"LightSkyBlue\",\n    \"LightSlateGray\", \"LightSlateGrey\",\n    \"LightSteelBlue\", \"LightYellow\",\n    \"Lime\",\"LimeGreen\",\n    \"Linen\", \"Magenta\",\n    \"Maroon\", \"MediumAquaMarine\",\n    \"MediumBlue\", \"MediumOrchid\",\n    \"MediumPurple\",\"MediumSeaGreen\",\n    \"MediumSlateBlue\",\"MediumSpringGreen\",\n    \"MediumTurquoise\", \"MediumVioletRed\",\n    \"MidnightBlue\", \n    \"MistyRose\",\"Moccasin\",\n    \"NavajoWhite\",  \"Navy\",\n    \"OliveDrab\",\"Orange\",\n    \"OrangeRed\",\"Orchid\",\n    \"PaleGoldenRod\",\"PaleGreen\",\n    \"PaleTurquoise\",\"PaleVioletRed\",\n    \"PapayaWhip\",\"PeachPuff\",\n     \"Peru\", \"Pink\", \n    \"Purple\",\"RebeccaPurple\",\n    \"Red\",\"RosyBrown\",\n    \"RoyalBlue\",\"SaddleBrown\",\n    \"Salmon\", \"SandyBrown\",\n    \"SeaGreen\",\"SeaShell\",\n    \"SkyBlue\",\"SlateBlue\",\n    \"SlateGray\",\"SlateGrey\",\n    \"SteelBlue\",  \"Tan\",\n    \"Teal\", \"Thistle\",\n    \"Tomato\",\"Turquoise\",\n    \"Violet\",\"Wheat\",\n\"Yellow\",\"YellowGreen\",\n  ];\n    const names = [  \"Bruce\",\"Cook\",\n    \"Carolyn\",\"Morgan\",\n    \"Albert\",\"Walker\",\n    \"Randy\",\"Reed\",\n    \"Larry\",\"Barnes\",\n    \"Lois\",\"Wilson\",\n    \"Jesse\",\"Campbell\",\n    \"Ernest\",\"Rogers\",\n    \"Theresa\",\"Patterson\",\n    \"Henry\",\"Simmons\",\n    \"Michelle\",\"Perry\",\n    \"Frank\",\"Butler\",\n    \"Shirley\"]\n\n    useEffect(() => {\n        // Update the document title using the browser API\n        function fetchData() {\n            fetch('https://services5.arcgis.com/GfwWNkhOj9bNBqoJ/arcgis/rest/services/NYC_Election_Districts_Water_Included/FeatureServer/0/query?where=1=1&outFields=*&outSR=4326&f=pgeojson', {\n                // mode: 'no-cors',\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json',\n                },\n            },\n            ).then(response => {\n                if (response.ok) {\n                    response.json().then(json => {\n                        setFeatures(json.features)\n                    })\n                }\n            })\n        }\n        fetchData();\n    }, []);\n\n    useEffect(() => {\n        setPropertiesTable()\n    }, [featuresData])\n\n    useEffect(() => {\n        appendNewDrawnPolygonsToTable()    \n        }, [globalState.polygonAddedToMap])\n\n    function setPropertiesTable() {\n        globalActions.addColorForPoly()\n        const propertiesData = [];\n        featuresData.forEach(property => {\n            propertiesData.push(property.properties);\n            let color = colors[Math.floor(Math.random() * colors.length)];\n            let name = names[Math.floor(Math.random() * names.length)];\n            globalActions.addColorForPoly(color);\n            globalActions.addNameForPoly(name)\n        });\n        setProperties(propertiesData);\n    }\n\n    function appendNewDrawnPolygonsToTable(){\n        if (globalState.PolygonAddedToMap != null){        \n        let newTable = [...properties,[globalState.PolygonAddedToMap]]\n        let color = colors[Math.floor(Math.random() * colors.length)];\n        globalActions.addColorForPoly(color);\n        setProperties(newTable)\n        }\n    }\n    function displayInTable(id, show) {\n        select(id, show);\n    }\n\n    return (\n        <div >\n            <div style ={{display: \"flex\"}} >\n                <div ><SimpleMap pos={featuresData} mapper={displayInTable} /></div>\n                <div ><RenderTable properties = {properties}></RenderTable></div>\n            </div>\n        </div>\n    );\n\n}\n","import logo from './logo.svg';\nimport './style/App.css';\nimport Controller from'./Controller'\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <div ><Controller></Controller></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n<script type=\"text/javascript\"\nsrc=\"http://maps.google.com/maps/api/js?sensor=false&libraries=drawing\"></script>\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}